{"version":3,"sources":["webpack://node-fred/webpack/universalModuleDefinition","webpack://node-fred/webpack/bootstrap","webpack://node-fred/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://node-fred/./node_modules/@babel/runtime/helpers/createClass.js","webpack://node-fred/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://node-fred/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://node-fred/./node_modules/@babel/runtime/helpers/inherits.js","webpack://node-fred/external \"axios\"","webpack://node-fred/./node_modules/@babel/runtime/helpers/typeof.js","webpack://node-fred/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://node-fred/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://node-fred/./src/api.js","webpack://node-fred/./src/Api/Builders/builder.js","webpack://node-fred/./src/Api/Builders/seriesBuilder.js","webpack://node-fred/./src/Api/series.js","webpack://node-fred/./src/Api/Builders/categoryBuilder.js","webpack://node-fred/./src/Api/categories.js","webpack://node-fred/./src/Api/Builders/releaseBuilder.js","webpack://node-fred/./src/Api/releases.js","webpack://node-fred/./src/Api/Builders/sourcesBuilder.js","webpack://node-fred/./src/Api/sources.js","webpack://node-fred/./src/Api/Builders/tagsBuilder.js","webpack://node-fred/./src/Api/tags.js","webpack://node-fred/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","global","__WEBPACK_EXTERNAL_MODULE__5__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","configurable","writable","protoProps","staticProps","_typeof","assertThisInitialized","self","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","subClass","superClass","constructor","obj","iterator","ReferenceError","_setPrototypeOf","api","axios","baseURL","timeout","headers","Builder","this","url","attribute","apiKey","addAttribute","fileType","dateString","match","params","realTimeStart","realtime_start","isValidDate","Error","realTimeEnd","realtime_end","limit","parseInt","offset","orderBy","order_by","sortOrder","sort_order","toLowerCase","filterVariable","filter_variable","filterValue","filter_value","tagNames","tag_names","excludeTagNames","exclude_tag_names","searchText","search_text","tagGroupId","tag_group_id","SeriesBuilder","seriesId","observationStart","observation_start","observationEnd","observation_end","units","frequency","aggregationMethod","aggregation_method","outputType","output_type","vintageDates","vintage_dates","searchType","search_type","seriesSearchText","tagSearchText","tag_search_text","Series","returnType","Promise","resolve","reject","setAPIKey","setFileType","setSeriesId","setRealTimeStart","setRealTimeEnd","getUrl","then","res","data","err","response","e","setLimit","setOffset","setSortOrder","setObservationStart","setObservationEnd","setUnits","setFrequency","setAggregationMethod","setOutputType","setVintageDate","setSearchText","setOrderBy","setFilterVariable","setFilterValue","setTagNames","setExcludeTagNames","setSearchType","setTagGroupId","setTagSearchText","setSeriesSearchText","CategoryBuilder","categoryId","Categories","setCategoryId","ReleaseBuilder","releaseId","includeRelatedDatesWithNoData","include_release_dates_with_no_data","elementId","element_id","includeObservationValues","include_observation_values","observationDate","observation_date","Releases","setIncludeRelatedDatesWithNoData","setReleaseId","setElementId","setIncludeObservationValues","setObservationDate","SourcesBuilder","sourceId","Sources","setSourceId","TagsBuilder","Tags","Fred","categories","releases","sources","series","tags"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"axios\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"node-fred\", [\"axios\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"node-fred\"] = factory(require(\"axios\"));\n\telse\n\t\troot[\"node-fred\"] = factory(root[\"axios\"]);\n})(global, function(__WEBPACK_EXTERNAL_MODULE__5__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","module.exports = __WEBPACK_EXTERNAL_MODULE__5__;","function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","import axios from 'axios';\n\nconst api = axios.create({\n    baseURL: 'https://api.stlouisfed.org/fred/',\n    timeout: 5000,\n    headers: {}\n});\n\nexport default api;\n","class Builder {\n    constructor() {\n        this.url = '';\n    }\n\n    addAttribute(attribute) {\n        this.url += (this.url === '' ? '' : '&') + attribute;\n        return this;\n    }\n\n    setAPIKey(apiKey) {\n        return this.addAttribute(`api_key=${apiKey}`);\n    }\n\n    setFileType(fileType) {\n        return this.addAttribute(`file_type=${fileType}`);\n    }\n\n    isValidDate(dateString) { // eslint-disable-line\n        const regEx = /^\\d{4}-\\d{2}-\\d{2}$/;\n\n        return dateString.match(regEx) != null;\n    }\n\n    setRealTimeStart(params) {\n        const realTimeStart = params.realtime_start;\n\n        if (!realTimeStart) {\n            return this;\n        }\n        if (!this.isValidDate(realTimeStart)) {\n            throw new Error('The format of this date is not valid. Please format the date like this: YYYY-MM-DD');\n        }\n        return this.addAttribute(`realtime_start=${realTimeStart}`);\n    }\n\n    setRealTimeEnd(params) {\n        const realTimeEnd = params.realtime_end;\n\n        if (!realTimeEnd) {\n            return this;\n        }\n        if (!this.isValidDate(realTimeEnd)) {\n            throw new Error('The format of this date is not valid. Please format the date like this: YYYY-MM-DD');\n        }\n        return this.addAttribute(`realtime_end=${realTimeEnd}`);\n    }\n\n    setLimit(params) {\n        const limit = parseInt(params.limit, 10);\n\n        if (!limit) {\n            return this;\n        }\n        if (limit < 0 || limit > 1000) {\n            throw new Error('Limit must be between 0 and 1000');\n        }\n        return this.addAttribute(`limit=${limit}`);\n    }\n\n    setOffset(params) {\n        const offset = parseInt(params.offset, 10);\n\n        if (!offset) {\n            return this;\n        }\n        if (offset < 0) {\n            throw new Error('Offset must be greater than 0');\n        }\n        return this.addAttribute(`offset=${offset}`);\n    }\n\n    setOrderBy(params) {\n        const orderBy = params.order_by;\n\n        if (!orderBy) {\n            return this;\n        }\n        return this.addAttribute(`order_by=${orderBy}`);\n    }\n\n    setSortOrder(params) {\n        let sortOrder = params.sort_order;\n\n        if (!sortOrder) {\n            return this;\n        }\n        sortOrder = sortOrder.toLowerCase();\n        if (sortOrder !== 'asc' && sortOrder !== 'desc') {\n            throw new Error('Sort order can only be either asc or desc');\n        }\n        return this.addAttribute(`sort_order=${sortOrder}`);\n    }\n\n    setFilterVariable(params) {\n        const filterVariable = params.filter_variable;\n\n        if (!filterVariable) {\n            return this;\n        }\n        return this.addAttribute(`filter_variable=${filterVariable}`);\n    }\n\n    setFilterValue(params) {\n        const filterValue = params.filter_value;\n\n        if (!filterValue) {\n            return this;\n        }\n        return this.addAttribute(`filter_value=${filterValue}`);\n    }\n\n    setTagNames(params) {\n        if (typeof (params) === 'string') {\n            return this.addAttribute(`tag_names=${params}`);\n        }\n        const tagNames = params.tag_names;\n\n        if (!tagNames) {\n            return this;\n        }\n        return this.addAttribute(`tag_names=${tagNames}`);\n    }\n\n    setExcludeTagNames(params) {\n        const excludeTagNames = params.exclude_tag_names;\n\n        if (!excludeTagNames) {\n            return this;\n        }\n        return this.addAttribute(`exclude_tag_names=${excludeTagNames}`);\n    }\n\n    setSearchText(params) {\n        const searchText = params.search_text;\n\n        if (!searchText) {\n            return this;\n        }\n        return this.addAttribute(`search_text=${searchText}`);\n    }\n\n    setTagGroupId(params) {\n        const tagGroupId = params.tag_group_id;\n\n        if (!tagGroupId) {\n            return this;\n        }\n        return this.addAttribute(`tag_group_id=${tagGroupId}`);\n    }\n\n    getUrl() {\n        return this.url;\n    }\n}\n\nexport default Builder;\n","import Builder from './builder';\n\nclass SeriesBuilder extends Builder {\n    setSeriesId(seriesId) {\n        return this.addAttribute(`series_id=${seriesId}`);\n    }\n\n    setObservationStart(params) {\n        const observationStart = params.observation_start;\n\n        if (!observationStart) {\n            return this;\n        }\n        if (!this.isValidDate(observationStart)) {\n            throw new Error('The format of this date is not valid. Please format the date like this: YYYY-MM-DD');\n        }\n        return this.addAttribute(`observation_start=${observationStart}`);\n    }\n\n    setObservationEnd(params) {\n        const observationEnd = params.observation_end;\n\n        if (!observationEnd) {\n            return this;\n        }\n        if (!this.isValidDate(observationEnd)) {\n            throw new Error('The format of this date is not valid. Please format the date like this: YYYY-MM-DD');\n        }\n        return this.addAttribute(`observation_end=${observationEnd}`);\n    }\n\n    setUnits(params) {\n        const { units } = params;\n\n        if (units === '') {\n            return this;\n        }\n        return this.addAttribute(`units=${units}`);\n    }\n\n    setFrequency(params) {\n        const { frequency } = params;\n\n        if (!frequency) {\n            return this;\n        }\n        return this.addAttribute(`frequency=${frequency}`);\n    }\n\n    setAggregationMethod(params) {\n        const aggregationMethod = params.aggregation_method;\n\n        if (!aggregationMethod) {\n            return this;\n        }\n        return this.addAttribute(`aggregation_method=${aggregationMethod}`);\n    }\n\n    setOutputType(params) {\n        const outputType = params.output_type;\n\n        if (!outputType) {\n            return this;\n        }\n        return this.addAttribute(`output_type=${outputType}`);\n    }\n\n    setVintageDate(params) {\n        const vintageDates = params.vintage_dates;\n\n        if (!vintageDates) {\n            return this;\n        }\n        return this.addAttribute(`vintage_dates=${vintageDates}`);\n    }\n\n    setSearchType(params) {\n        const searchType = params.search_type;\n\n        if (!searchType) {\n            return this;\n        }\n        return this.addAttribute(`search_type=${searchType}`);\n    }\n\n    setSearchText(searchText) {\n        if (!searchText) {\n            return this;\n        }\n        return this.addAttribute(`search_text=${searchText}`);\n    }\n\n    setSeriesSearchText(seriesSearchText) {\n        return this.addAttribute(`series_search_text=${seriesSearchText}`);\n    }\n\n    setTagSearchText(params) {\n        const tagSearchText = params.tag_search_text;\n\n        if (!tagSearchText) {\n            return this;\n        }\n        return this.addAttribute(`tag_search_text=${tagSearchText}`);\n    }\n}\n\nexport default SeriesBuilder;\n","import api from '../api';\nimport SeriesBuilder from './Builders/seriesBuilder';\n\nclass Series {\n    constructor(apiKey, returnType) {\n        this.apiKey = apiKey;\n        this.returnType = returnType;\n    }\n\n    /**\n     * Gets an economic data series.\n     * @param {Number} seriesId\n     * @param {Object} params\n     * @returns {Promise} Resolves with an economic data series or errors out\n     */\n    getSeries(seriesId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new SeriesBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setSeriesId(seriesId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .getUrl();\n\n                api.get(`series?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the categories for an economic data series.\n     * @param {Number} seriesId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the categories for an economic data series or errors out\n     */\n    getCategoriesForSeries(seriesId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new SeriesBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setSeriesId(seriesId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .getUrl();\n\n                api.get(`series/categories?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the observations or data values for an economic data series.\n     * @param {Number} seriesId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the observations or data values\n     * for an economic data series or errors out\n     */\n    getObservationsForSeries(seriesId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new SeriesBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setSeriesId(seriesId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setSortOrder(params)\n                    .setObservationStart(params)\n                    .setObservationEnd(params)\n                    .setUnits(params)\n                    .setFrequency(params)\n                    .setAggregationMethod(params)\n                    .setOutputType(params)\n                    .setVintageDate(params)\n                    .getUrl();\n\n                api.get(`series/observations?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the release for an economic data series.\n     * @param {Number} seriesId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the release for an economic data series or errors out\n     */\n    getReleaseForSeries(seriesId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new SeriesBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setSeriesId(seriesId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .getUrl();\n\n                api.get(`series/release?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets economic data series that match keywords.\n     * @param {String} searchText\n     * @param {Object} params\n     * @returns {Promise} Resolves with economic data series that match keywords or errors out\n     */\n    getSeriesThatMatchesSearch(searchText, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new SeriesBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setSearchText(searchText)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .setFilterVariable(params)\n                    .setFilterValue(params)\n                    .setTagNames(params)\n                    .setExcludeTagNames(params)\n                    .setSearchType(params)\n                    .getUrl();\n\n                api.get(`series/search?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the tags for a series search.\n     * @param {Number} seriesId\n     * @param {String} seriesSearchText\n     * @param {Object} params\n     * @returns {Promise} Resolves with the tags for a series search or errors out\n     */\n    getTagsForSeriesSearch(seriesSearchText, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new SeriesBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .setTagNames(params)\n                    .setTagGroupId(params)\n                    .setTagSearchText(params)\n                    .setSeriesSearchText(seriesSearchText)\n                    .getUrl();\n\n                api.get(`series/search/tags?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the related tags for a series search.\n     * @param {Number} seriesId\n     * @param {String} seriesSearchText\n     * @param {Object} params\n     * @returns {Promise} Resolves with the related tags for a series search or errors out\n     */\n    getRelatedTagsForSeriesSearch(seriesSearchText, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new SeriesBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .setTagNames(params)\n                    .setExcludeTagNames(params)\n                    .setTagGroupId(params)\n                    .setTagSearchText(params)\n                    .setSeriesSearchText(seriesSearchText)\n                    .getUrl();\n\n                api.get(`series/search/related_tags?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the tags for an economic data series.\n     * @param {Number} seriesId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the tags for an economic data series or errors out\n     */\n    getTagsForSeries(seriesId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new SeriesBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setSeriesId(seriesId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .getUrl();\n\n                api.get(`series/tags?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets economic data series sorted by when observations were updated on the FRED® server.\n     * @param {Object} params\n     * @returns {Promise} Resolves with economic data series sorted by\n     * when observations were updated on the FRED® server or errors out\n     */\n    getUpdatedSeries(params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new SeriesBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setFilterValue(params)\n                    .getUrl();\n\n                api.get(`series/updates?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the dates in history when a series' data values were\n     * revised or new data values were released.\n     * @param {Number} seriesId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the dates in history when a\n     * series' data values were revised or new data values were released or errors out\n     */\n    getVintageDatesSeries(seriesId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new SeriesBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setSeriesId(seriesId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setSortOrder(params)\n                    .getUrl();\n\n                api.get(`series/vintagedates?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n}\n\nexport default Series;\n","import Builder from './builder';\n\nclass CategoryBuilder extends Builder {\n    setCategoryId(categoryId) {\n        return this.addAttribute(`category_id=${categoryId}`);\n    }\n}\n\nexport default CategoryBuilder;\n","import api from '../api';\nimport CategoryBuilder from './Builders/categoryBuilder';\n\nclass Categories {\n    constructor(apiKey, returnType) {\n        this.apiKey = apiKey;\n        this.returnType = returnType;\n    }\n\n    /**\n     * Gets a category\n     * @param {Number} categoryId\n     * @returns {Promise} Resolves with the category or errors out\n     */\n    getCategory(categoryId) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new CategoryBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setCategoryId(categoryId)\n                    .setFileType(this.returnType)\n                    .getUrl();\n\n                api.get(`category?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the child categories for a specified parent category.\n     * @param {Number} categoryId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the child category or errors out\n     */\n    getChildCategories(categoryId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new CategoryBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setCategoryId(categoryId)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .getUrl();\n\n                api.get(`category/children?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the related categories for a category.\n     * @param {Number} categoryId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the related categories or errors out\n     */\n    getRelatedCategories(categoryId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new CategoryBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setCategoryId(categoryId)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .getUrl();\n\n                api.get(`category/related?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the series in a category.\n     * @param {Number} categoryId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the series or errors out\n     */\n    getCategorySeries(categoryId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new CategoryBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setCategoryId(categoryId)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .setFilterVariable(params)\n                    .setFilterValue(params)\n                    .setTagNames(params)\n                    .setExcludeTagNames(params)\n                    .getUrl();\n\n                api.get(`category/series?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Get the FRED tags for a category.\n     * @param {Number} categoryId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the tags for the category or errors out\n     */\n    getCategoryTags(categoryId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new CategoryBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setCategoryId(categoryId)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .setTagNames(params)\n                    .setTagGroupId(params)\n                    .setSearchText(params)\n                    .getUrl();\n\n                api.get(`category/tags?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Get the related FRED tags for a category.\n     * @param {Number} categoryId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the related tags for the category or errors out\n     */\n    getCategoryRelatedTags(categoryId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new CategoryBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setCategoryId(categoryId)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .setTagNames(params)\n                    .setTagGroupId(params)\n                    .setSearchText(params)\n                    .getUrl();\n\n                api.get(`category/related_tags?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n}\n\nexport default Categories;\n","import Builder from './builder';\n\nclass ReleaseBuilder extends Builder {\n    setReleaseId(releaseId) {\n        // Must be a positive integer\n        const id = parseInt(releaseId, 10);\n\n        if (id <= 0) {\n            throw new Error('The release id must be a positive integer');\n        }\n\n        return this.addAttribute(`release_id=${releaseId}`);\n    }\n\n    setIncludeRelatedDatesWithNoData(params) {\n        const includeRelatedDatesWithNoData = params.include_release_dates_with_no_data;\n\n        if (!includeRelatedDatesWithNoData) {\n            return this;\n        }\n        return this.addAttribute(`include_release_dates_with_no_data=${includeRelatedDatesWithNoData}`);\n    }\n\n    setElementId(params) {\n        const elementId = params.element_id;\n\n        if (!elementId) {\n            return this;\n        }\n        return this.addAttribute(`element_id=${elementId}`);\n    }\n\n    setIncludeObservationValues(params) {\n        const includeObservationValues = params.include_observation_values;\n\n        if (!includeObservationValues) {\n            return this;\n        }\n        if (includeObservationValues !== 'true' && includeObservationValues !== 'false') {\n            throw new Error('The include_observation_values field must either be true or false');\n        }\n        return this.addAttribute(`include_observation_values=${includeObservationValues}`);\n    }\n\n    setObservationDate(params) {\n        const observationDate = params.observation_date;\n\n        if (!observationDate) {\n            return this;\n        }\n        if (!this.isValidDate(observationDate)) {\n            throw new Error('The format of this date is not valid. Please format the date like this: YYYY-MM-DD');\n        }\n        return this.addAttribute(`observation_date=${observationDate}`);\n    }\n}\n\nexport default ReleaseBuilder;\n","import api from '../api';\nimport ReleaseBuilder from './Builders/releaseBuilder';\n\nclass Releases {\n    constructor(apiKey, returnType) {\n        this.apiKey = apiKey;\n        this.returnType = returnType;\n    }\n\n    /**\n     * Gets all releases of economic data.\n     * @param {Object} params\n     * @returns {Promise} Resolves with all releases of economic data or errors out\n     */\n    getAllReleases(params) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new ReleaseBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .getUrl();\n\n                api.get(`releases?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets release dates for all releases of economic data.\n     * @param {Object} params\n     * @returns {Promise} Resolves with all releases dates of economic data or errors out\n     */\n    getAllReleasesWithDates(params) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new ReleaseBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .setIncludeRelatedDatesWithNoData(params)\n                    .getUrl();\n\n                api.get(`releases/dates?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets a release of economic data.\n     * @param {Number} releaseId\n     * @param {Object} params\n     * @returns {Promise} Resolves with all releases dates of economic data or errors out\n     */\n    getRelease(releaseId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new ReleaseBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setReleaseId(releaseId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .getUrl();\n\n                api.get(`release?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Get release dates for a release of economic data.\n     * @param {Number} releaseId\n     * @param {Object} params\n     * @returns {Promise} Resolves with all releases dates of economic data or errors out\n     */\n    getReleaseWithDates(releaseId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new ReleaseBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setReleaseId(releaseId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setSortOrder(params)\n                    .setIncludeRelatedDatesWithNoData(params)\n                    .getUrl();\n\n                api.get(`release/dates?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the series on a release of economic data.\n     * @param {Number} releaseId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the series on a release of economic data or errors out\n     */\n    getSeriesForRelease(releaseId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new ReleaseBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setReleaseId(releaseId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setSortOrder(params)\n                    .setOrderBy(params)\n                    .setFilterVariable(params)\n                    .setFilterValue(params)\n                    .setTagNames(params)\n                    .setExcludeTagNames(params)\n                    .getUrl();\n\n                api.get(`release/series?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the sources for a release of economic data.\n     * @param {Number} releaseId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the sources for a release of economic data or errors out\n     */\n    getSourcesForRelease(releaseId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new ReleaseBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setReleaseId(releaseId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .getUrl();\n\n                api.get(`release/sources?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the FRED tags for a release.\n     * @param {Number} releaseId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the sources for a release of economic data or errors out\n     */\n    getTagsForRelease(releaseId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new ReleaseBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setReleaseId(releaseId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setSortOrder(params)\n                    .setOrderBy(params)\n                    .setTagNames(params)\n                    .setTagGroupId(params)\n                    .setSearchText(params)\n                    .getUrl();\n\n                api.get(`release/tags?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Get the related FRED tags for one or more FRED tags within a release.\n     * @param {Number} releaseId\n     * @param {String} tagNames\n     * @param {Object} params\n     * @returns {Promise} Resolves with the related FRED tags for\n     * one or more FRED tags within a release or errors out\n     */\n    getRelatedTagsForRelease(releaseId, tagNames, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new ReleaseBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setReleaseId(releaseId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setSortOrder(params)\n                    .setOrderBy(params)\n                    .setTagNames({ tag_names: tagNames })\n                    .setExcludeTagNames(params)\n                    .setTagGroupId(params)\n                    .setSearchText(params)\n                    .getUrl();\n\n                api.get(`release/related_tags?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets release table trees for a given release.\n     * @param {Number} releaseId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the release table\n     * trees for a given release or errors out\n     */\n    getTableTreesForRelease(releaseId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new ReleaseBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setReleaseId(releaseId)\n                    .setElementId(params)\n                    .setIncludeObservationValues(params)\n                    .setObservationDate(params)\n                    .getUrl();\n\n                api.get(`release/tables?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n}\n\nexport default Releases;\n","import Builder from './builder';\n\nclass SourcesBuilder extends Builder {\n    setSourceId(sourceId) {\n        return this.addAttribute(`source_id=${sourceId}`);\n    }\n}\n\nexport default SourcesBuilder;\n","import api from '../api';\nimport SourcesBuilder from './Builders/sourcesBuilder';\n\nclass Sources {\n    constructor(apiKey, returnType) {\n        this.apiKey = apiKey;\n        this.returnType = returnType;\n    }\n\n    /**\n     * Gets all sources of economic data.\n     * @param {Object} params\n     * @returns {Promise} Resolves with all sources of economic data or errors out\n     */\n    getAllSources(params) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new SourcesBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .getUrl();\n\n                api.get(`sources?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets a source of economic data.\n     * @param {Number} sourceId\n     * @param {Object} params\n     * @returns {Promise} Resolves with a source of economic data or errors out\n     */\n    getSource(sourceId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new SourcesBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setSourceId(sourceId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .getUrl();\n\n                api.get(`source?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the releases for a source.\n     * @param {Number} sourceId\n     * @param {Object} params\n     * @returns {Promise} Resolves with the releases for a source or errors out\n     */\n    getReleasesForSource(sourceId, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new SourcesBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setSourceId(sourceId)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .getUrl();\n\n                api.get(`source/releases?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n}\n\nexport default Sources;\n","import Builder from './builder';\n\nclass TagsBuilder extends Builder {\n}\n\nexport default TagsBuilder;\n","import api from '../api';\nimport TagsBuilder from './Builders/tagsBuilder';\n\nclass Tags {\n    constructor(apiKey, returnType) {\n        this.apiKey = apiKey;\n        this.returnType = returnType;\n    }\n\n    /**\n     * Gets all tags, search for tags, or get tags by name.\n     * @param {Object} params\n     * @returns {Promise} Resolves with a set of tags or errors out\n     */\n    getAllTags(params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new TagsBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .setTagNames(params)\n                    .setTagGroupId(params)\n                    .setSearchText(params)\n                    .getUrl();\n\n                api.get(`tags?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Get the related tags for one or more tags.\n     * @param {string} tagNames\n     * @param {Object} params\n     * @returns {Promise} Resolves with the related tags for one or more tags or errors out\n     */\n    getAllRelatedTags(tagNames, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new TagsBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .setTagNames(tagNames)\n                    .setExcludeTagNames(params)\n                    .setTagGroupId(params)\n                    .setSearchText(params)\n                    .getUrl();\n\n                api.get(`related_tags?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    /**\n     * Gets the series matching tags.\n     * @param {string} tagNames\n     * @param {Object} params\n     * @returns {Promise} Resolves with the series matching tags or errors out\n     */\n    getAllSeriesMatchingTags(tagNames, params = {}) {\n        return new Promise((resolve, reject) => {\n            try {\n                const url = new TagsBuilder()\n                    .setAPIKey(this.apiKey)\n                    .setFileType(this.returnType)\n                    .setRealTimeStart(params)\n                    .setRealTimeEnd(params)\n                    .setLimit(params)\n                    .setOffset(params)\n                    .setOrderBy(params)\n                    .setSortOrder(params)\n                    .setTagNames({ tag_names: tagNames })\n                    .setExcludeTagNames(params)\n                    .getUrl();\n\n                api.get(`tags/series?${url}`)\n                    .then((res) => {\n                        resolve(res.data);\n                    })\n                    .catch((err) => {\n                        reject(err.response.data);\n                    });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n}\n\nexport default Tags;\n","import Series from './Api/series';\nimport Categories from './Api/categories';\nimport Releases from './Api/releases';\nimport Sources from './Api/sources';\nimport Tags from './Api/tags';\n\nclass Fred {\n    // Return type is either xml or json, defaults to json\n    constructor(apiKey, returnType = 'json') {\n        this.categories = new Categories(apiKey, returnType);\n        this.releases = new Releases(apiKey, returnType);\n        this.sources = new Sources(apiKey, returnType);\n        this.series = new Series(apiKey, returnType);\n        this.tags = new Tags(apiKey, returnType);\n    }\n}\n\nexport default Fred;\n"],"sourceRoot":""}